 Design Patterns: Many design patterns in software development, such as Strategy, Command, and Factory, rely on
 polymorphism. Polymorphism allows these patterns to encapsulate behavior in a flexible and interchangeable way.

 Working with Collections: Java Collections (like List, Set, and Map) make heavy use of polymorphism. You can write
 code that works on the List interface, but at runtime, it can operate on different implementations like ArrayList,
 LinkedList, or Vector

 List<String> list = new ArrayList<>();
 list.add("Hello");
 list.add("World");

 Overloading is compile-time polymorphism, allowing you to define multiple methods with the same name but different
 signatures.
 Overriding is runtime polymorphism, where a method in a child class provides a specific implementation of a method
 in the parent class.
 Use case: Polymorphism allows for more flexible, extensible, and maintainable code. It enables the same interface
 to be used for different underlying forms (data types or objects), which promotes scalability and abstraction in the codebase.

Overloading:
 public class Sum{

 public int sum(int x,int y)
 { return (x+y);}

 public int sum(int x, int y, int z)
 { return (x+y+z); }

 public double sum(double x, double y)
 { return (x+y); }

 public static void main(String[] args)
 {
 Sum s = new Sum();
 System.out.println(s.sum(10,20));
 s.sum(10,20,30);
 s.sum(10.5, 20.5);
 }
 }



Overriding:
 public class Parent {
 public void show(){System.out.prinltn("Parents's show()");}

 public class Child{

 @Override
 public void show()
 {
 System.out.prinln("Child's show()");
 }

 }

 class Main()
 {
 public static void main(String[] args)
 {
 Parent p1 = new Parent();
 p1.show();

 Parent p2 = new Child();
 p2.show();
 }
 }