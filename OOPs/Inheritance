Code Reusability: The code written in the Superclass is common to all subclasses. Child classes can directly use
the parent class code.
Method Overriding: Method Overriding is achievable only through Inheritance. It is one of the ways by which Java
achieves Run Time Polymorphism.
Abstraction: The concept of abstract where we do not have to provide all details, is achieved through inheritance.
Abstraction only shows the functionality to the user

class Bicycle {
    // the Bicycle class has two fields
    public int gear;
    public int speed;

    // the Bicycle class has one constructor
    public Bicycle(int gear, int speed)
    {
        this.gear = gear;
        this.speed = speed;
    }

    // the Bicycle class has three methods
    public void applyBrake(int decrement)
    {
        speed -= decrement;
    }

    public void speedUp(int increment)
    {
        speed += increment;
    }

    // toString() method to print info of Bicycle
    public String toString()
    {
        return ("No of gears are " + gear + "\n"
                + "speed of bicycle is " + speed);
    }
}

// derived class
class MountainBike extends Bicycle {

    // the MountainBike subclass adds one more field
    public int seatHeight;

    // the MountainBike subclass has one constructor
    public MountainBike(int gear, int speed,
                        int startHeight)
    {
        // invoking base-class(Bicycle) constructor
        super(gear, speed);
        seatHeight = startHeight;
    }

    // the MountainBike subclass adds one more method
    public void setHeight(int newValue)
    {
        seatHeight = newValue;
    }

    // overriding toString() method
    // of Bicycle to print more info
    @Override public String toString()
    {
        return (super.toString() + "\nseat height is "
                + seatHeight);
    }
}

// driver class
public class Test {
    public static void main(String args[])
    {

        MountainBike mb = new MountainBike(3, 100, 25);
        System.out.println(mb.toString());
    }
}


Single:

class Animal{
void eat(){sout("eating");}
class Dog extends Animal{
void bark(){ sout("barking");}
class Main{
psvm(String[] args)
{ Dog d = new Dog();
d.eat(); d.bark();}}

multi-level:

class Animal{
void eat(){sout("eating");}
class Dog extends Animal{
void bark(){ sout("barking");}
class BabyDog extends Dog{
void  weep(){sout("weeping");}
class Main{
psvm(String[] args)
{ BabyDog d = new Dog();
d.eat(); d.bark(); d.weep();}}

problem in multiple inheritance:

class A{
void show(){
sout("hello!");}}
class B{
void show(){
sout("Hello world!");}}
class C extends A,B{
sout("Hello to all !");}
class Main{
psvm(String[] args)
{ C obj = new C();
c.show();  // confused which show() should be invoked

}

this problem is solved by interfaces


