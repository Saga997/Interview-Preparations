Tight Coupling
Definition: Tight coupling occurs when classes or components are highly dependent on each other. Changes in one
class will often require changes in the other, leading to less flexibility, harder maintenance, and more difficulty
in unit testing.

class Engine{  // create a concrete class and define the method body
public void start()
{ System.out.prinln("The engine has started");
}
}
class Car extends Engine{
private Engine engine;

public Car()
{ engine = new Engine();} //// Car is tightly coupled to Engine

public void startCar()
{ engine.start();
System.out.prinln("The car engine has started"); }
}

class MainDriver{
psvm{String[] args)
{ Car car =  new Car();
 car.start();
 car.startCar();
 }


  Loose coupling occurs when classes or components depend on each other as little as possible.
  They interact through interfaces or abstract classes, minimizing their dependency on specific implementations. This increases flexibility, maintainability, and makes testing easier.


public interface Engine{  // create the interface and create abstract method
public void start(); // create an abstract method and don't define its body
}

pubic class DieselEngine implements Engine{
public void start()
{ sout("DiseleEngine has started");}
}

public class ElectricEngine implements Engine{
public void start()
{ sout("Electric engine has started"); }

class Car{
 private Engine engine;

 public Car(Engine engine)
 { this.engine = engine;}

 public void startCar() {
         engine.start();
         System.out.println("Car is running.");
     }
     }

public class MainDriver{
psvm(String[] args)
{  Engine engine1 = new DieselEngine();
   Car car = new Car(engine1);
   engine1.start();

   Engine engine2 = new ElectricEngine();
   Car car = new Car(engine2);
   engine2.start();
}
