AWS Secrets Manager is a service designed to securely store, manage, and retrieve secrets, such as database credentials,
API keys, and other sensitive information. In the context of your CX-One WFM code base, it can be used to securely
fetch tenant-specific details, such as database connection strings or API credentials, without hardcoding these
sensitive details into your application code.

Create a Secret in AWS Secrets Manager
Navigate to AWS Secrets Manager in the AWS Management Console.

Create a New Secret:

1.Choose the secret type (e.g., Credentials for RDS Database or Other type of secret).
Input the secret key-value pairs, such as tenant-specific details:

{
  "tenantId": "tenant123",
  "dbUsername": "tenant_db_user",
  "dbPassword": "tenant_db_password",
  "dbHost": "tenant-db.host.amazonaws.com"
}

2.Configure Secret Name and Access Permissions:

Name your secret (e.g., WFM/Tenant123/DatabaseCredentials).
Set up resource permissions to control who can access this secret.
Enable Automatic Rotation (Optional):

Configure automatic rotation for database credentials if necessary.

Step 2: Configure IAM Roles and Permissions
Create an IAM Policy for Access:

Create a policy that allows reading secrets from AWS Secrets Manager. Below is an example policy:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Resource": [
        "arn:aws:secretsmanager:us-west-2:123456789012:secret:WFM/Tenant123/DatabaseCredentials-*"
      ]
    }
  ]
}
Attach the IAM Policy to Your Service or Role:

Attach the policy to the IAM role used by your application, AWS Lambda, or EC2 instance running the WFM application.
Step 3: Fetch the Secret in Your WFM Code Base
Use AWS SDKs (e.g., Java, Python, Node.js) to fetch the secrets in your application code.

Example Code in Java (Spring Boot): To fetch tenant details from AWS Secrets Manager in your Java-based WFM application:

Add AWS SDK Dependency: Add the AWS Secrets Manager SDK dependency in your pom.xml for Maven:

xml
Copy code
<dependency>
    <groupId>software.amazon.awssdk</groupId>
    <artifactId>secretsmanager</artifactId>
    <version>2.20.17</version>
</dependency>
Java Code to Fetch Secrets:

import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Map;

public class SecretsManagerService {

    private static final Region REGION = Region.US_WEST_2; // Replace with your region
    private static final String SECRET_NAME = "WFM/Tenant123/DatabaseCredentials";

    public Map<String, String> getTenantDetails() {
        SecretsManagerClient secretsManagerClient = SecretsManagerClient.builder()
                .region(REGION)
                .credentialsProvider(DefaultCredentialsProvider.create())
                .build();

        GetSecretValueRequest getSecretValueRequest = GetSecretValueRequest.builder()
                .secretId(SECRET_NAME)
                .build();

        GetSecretValueResponse getSecretValueResponse = secretsManagerClient.getSecretValue(getSecretValueRequest);

        String secretString = getSecretValueResponse.secretString();

        // Convert the secret string JSON into a Map
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            return objectMapper.readValue(secretString, Map.class);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse secret value", e);
        }
    }

    // Usage Example
    public void useTenantDetails() {
        Map<String, String> tenantDetails = getTenantDetails();
        System.out.println("Tenant ID: " + tenantDetails.get("tenantId"));
        System.out.println("Database Host: " + tenantDetails.get("dbHost"));
    }
}
Access Tenant Details:

Use the getTenantDetails() method to retrieve the tenant-specific secrets and use them wherever required in your WFM code base.
Step 4: Secure and Monitor Secret Access
Enable CloudTrail Logging: Monitor secret access and activities by enabling AWS CloudTrail logging, which helps you audit who accessed the secrets and when.

Use Least Privilege Access: Ensure that the IAM roles or users accessing the secrets have only the permissions necessary to perform their tasks