Collection is a root interface in the Java Collections Framework, which defines a group of objects known as elements.
It is the parent interface of several other interfaces such as List, Set, and Queue.

Purpose: It provides common methods for all collections, such as adding, removing, and inspecting elements.
The Collection interface is the foundation for many other interfaces and classes that represent various types of collections.

add(E e): Adds an element to the collection.
remove(Object o): Removes an element from the collection.
size(): Returns the number of elements in the collection.
isEmpty(): Checks if the collection is empty.
contains(Object o): Checks if the collection contains a specified element.
iterator(): Returns an iterator over the elements in the collection.
clear(): Removes all elements from the collection.

It is part of the java.util package.

import java.util.ArrayList;
import java.util.Collection;

public class CollectionExample {
    public static void main(String[] args) {
        Collection<String> collection = new ArrayList<>();
        collection.add("Apple");
        collection.add("Banana");
        System.out.println("Collection: " + collection); // Output: Collection: [Apple, Banana]
    }
}


Collections is a utility class in the Java Collections Framework that provides static methods to operate on or
return collections. It is essentially a helper class that contains various methods for manipulating and processing
collections, such as sorting, searching, and reversing.

n, Collections does not represent a data structure but offers a set of algorithms to be used on collections.

sort(List<T> list): Sorts the specified list into ascending order.
reverse(List<?> list): Reverses the order of elements in the specified list.
shuffle(List<?> list): Randomly shuffles the elements in the list.
min(Collection<? extends T> coll): Returns the smallest element in the collection.
max(Collection<? extends T> coll): Returns the largest element in the collection.
synchronizedList(List<T> list): Returns a synchronized (thread-safe) list.
binarySearch(List<? extends T> list, T key): Performs a binary search on the specified sorted list.

public class CollectionsExample {
    public static void main(String[] args) {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(5);
        numbers.add(1);
        numbers.add(3);

        System.out.println("Before Sorting: " + numbers); // Output: Before Sorting: [5, 1, 3]

        // Sorting the list using Collections class
        Collections.sort(numbers);
        System.out.println("After Sorting: " + numbers); // Output: After Sorting: [1, 3, 5]
    }
}