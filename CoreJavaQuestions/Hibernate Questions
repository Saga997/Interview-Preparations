Hibernate is a popular Object-Relational Mapping (ORM) framework for Java that simplifies database interactions.
provide interfaces to help manage database operations.

SessionFactory: This interface is responsible for creating Session instances. It is a thread-safe object and is
typically configured once and then used throughout the application. It is a factory for Session objects and is
generally configured using Hibernate configuration files or annotations.
Like 1 for mysql, 1 for oracle, (org.hibernate.SessionFactory)

Session: This is one of the core interfaces in Hibernate. Through the Session interface, you can perform CRUD operations,
execute queries, and manage,transactions. Common methods include save(), update(), delete(), get(), and createQuery().
It provides physical connection with DB

Transaction: This interface is used to manage transactions within a session. It provides methods for committing or
rolling back transactions, ensuring that a sequence of operations either completes successfully or is undone in case
of errors.

Criteria: This interface is used to build criteria queries in Hibernate. It allows for a more object-oriented way of
querying compared to HQL (Hibernate Query Language). Although it has been largely superseded by the CriteriaBuilder API
in JPA 2.0, it's still present in Hibernate for backward compatibility.

Query: This interface is used to execute HQL (Hibernate Query Language) or native SQL queries. It provides methods for
setting parameters, executing the query, and retrieving results.

SessionFactory factory = metadata.getSessionFactoryBuilder().build();
Session session = factory.openSession();
Transaction transaction = session.beginTransaction();

session.save(persistantObj);
transaction.commit();
factory.close();
session.close();

Criteria criteria = session.createCriteria(Entity.class);
List results = criteria.list();

Query query = session.createQuery("FROM Entity WHERE property = :value");
query.setParameter("value", value);
List results = query.list();

@Entity: Marks a class as a Hibernate entity (table in the database).
@Table: Specifies the table in the database that this entity maps to.
You can specify the table name, schema, and catalog.

@Entity
@Table(name = "products")
public class Product { ... }

@Id: Marks a field as the primary key of the entity.
@GeneratedValue: Specifies the generation strategy for primary key values (AUTO, IDENTITY, SEQUENCE, or TABLE).
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;

@Column: Maps a field to a specific column in the database table. Allows you to specify properties like
column name, length, nullable, etc.

@Column(name = "product_name", length = 100, nullable = false)
private String name;

@Basic: Used to specify that a field is a basic type and optionally customize its fetching strategy.
@Basic(fetch = FetchType.LAZY)
private String description;

@Temporal: Specifies the temporal type (DATE, TIME, or TIMESTAMP) of a date field.
@Temporal(TemporalType.DATE)
private Date createdDate;

@Transient: Excludes a field from being persisted to the database.
@Transient
private String tempValue;

@OneToOne: Maps a one-to-one relationship between two entities.
@OneToMany: Maps a one-to-many relationship, where one entity is related to many instances of another entity.
@ManyToOne: Maps a many-to-one relationship, which is the other side of a @OneToMany.
@ManyToMany: Maps a many-to-many relationship between two entities.

These annotations specify how entities relate to one another in terms of foreign keys and join tables. Understanding
these relationships is essential for correctly designing your database schema and ensuring proper data consistency.

A @OneToOne relationship is used when one entity is associated with exactly one instance of another entity.
This can be a unidirectional or bidirectional relationship.

Example Use Case: A Person has one Passport.
@Entity
public class Person {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToOne
    @JoinColumn(name = "passport_id") // Foreign key in the Person table
    private Passport passport;
}

@Entity
public class Passport {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String passportNumber;
}

A @OneToMany relationship is used when one entity is associated with multiple instances of another entity.
This relationship is usually bidirectional and is mapped using @ManyToOne on the other side.

Example Use Case: A Department has many Employees.
@Entity
public class Department {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL) // Reference to owning side
    private List<Employee> employees;
}

@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "department_id") // Foreign key in Employee table
    private Department department;
}

A @ManyToOne relationship is used when many instances of an entity are associated with one instance of another entity.
This is the other side of a @OneToMany relationship.
Example Use Case: Many Employees belong to one Department.
@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "department_id") // Foreign key in Employee table
    private Department department;
}

A @ManyToMany relationship is used when multiple instances of one entity are associated with multiple instances of
another entity. This relationship requires an intermediate join table to manage associations between the entities.

Example Use Case: A Student can enroll in many Courses, and a Course can have many Students.
@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToMany
    @JoinTable(
        name = "student_course", // Join table name
        joinColumns = @JoinColumn(name = "student_id"), // Foreign key in the join table
        inverseJoinColumns = @JoinColumn(name = "course_id") // Foreign key in the join table
    )
    private Set<Course> courses;
}

@Entity
public class Course {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToMany(mappedBy = "courses") // Reference to the owning side
    private Set<Student> students;
}


cascade = CascadeType.ALL is a configuration used in JPA and Hibernate that specifies how certain operations on the
parent entity should propagate to related child entities. When you set cascade = CascadeType.ALL on a relationship,
it means that all persistence operations performed on the parent entity will automatically be applied to the associated
child entities as well.

CascadeType.PERSIST: When the parent entity is persisted (saved), the child entities are also persisted automatically.
CascadeType.MERGE: When the parent entity is merged (updated), the changes are propagated to the child entities.
CascadeType.REMOVE: When the parent entity is deleted, the child entities are also deleted.
CascadeType.REFRESH: If the parent entity is refreshed (reloaded from the database), the child entities are also refreshed.
CascadeType.DETACH: When the parent entity is detached (disconnected from the persistence context),
the child entities are also detached.
CascadeType.DETACH: If the parent entity is detached from the persistence context, then all child entities are detached as well.

getCurrentSession()- This session is tied to the current transaction context.The session is bound to the current
thread and is available as long as the transaction is active. Once the transaction completes, the session is automatically closed.

Recommended for applications that have a transaction management strategy (like web applications with a
request-per-transaction pattern).

Session session = sessionFactory.getCurrentSession();
session.beginTransaction();
// Perform operations
session.getTransaction().commit();

openSession()- openSession() does not require an active transaction, and the session remains open until explicitly
closed by the user. It does not automatically participate in any ongoing transaction unless explicitly told to do so
hey must be manually managed to avoid memory leaks and resource exhaustion.
Session session = sessionFactory.openSession();

Suitable for batch processing, multi-threaded environments
                                                                           session.beginTransaction();
                                                                           // Perform operations
                                                                           session.getTransaction().commit();
                                                                           session.close(); // Must be explicitly closed




