
Using the new Keyword (Constructor)

This is the most common way to create an object in Java. It directly invokes the class constructor.

class Car {
    String model;

    // Constructor
    Car(String model) {
        this.model = model;
    }
}

public class Main {
    public static void main(String[] args) {
        Car car = new Car("Tesla"); // Creating an object using new keyword
        System.out.println(car.model); // Output: Tesla
    }
}

Using Class.forName() (Reflection)

Objects can be created by loading the class dynamically using Class.forName(), followed by invoking
the default constructor using newInstance().

public class Main {
    public static void main(String[] args) {
        try {
            // Creating an object of the class dynamically
            Class<?> carClass = Class.forName("Car");
            Car car = (Car) carClass.getDeclaredConstructor().newInstance();
            System.out.println("Car object created using Class.forName()");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
Using newInstance() of Constructor Class (Reflection)

Similar to Class.forName(), you can create objects by getting the Constructor object of the class and
invoking newInstance().

import java.lang.reflect.Constructor;

public class Main {
    public static void main(String[] args) {
        try {
            Constructor<Car> constructor = Car.class.getConstructor(String.class);
            Car car = constructor.newInstance("BMW");
            System.out.println(car.model); // Output: BMW
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
Using Clone Method

The clone() method is used to create a copy of an existing object. To use cloning, the class must implement the Cloneable interface and override the clone() method.
Example:
java
Copy code
class Car implements Cloneable {
    String model;

    Car(String model) {
        this.model = model;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}

public class Main {
    public static void main(String[] args) {
        try {
            Car car1 = new Car("Audi");
            Car car2 = (Car) car1.clone(); // Cloning car1 to create car2
            System.out.println(car2.model); // Output: Audi
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
    }
}
Using Deserialization

Deserialization is the process of converting a serialized object back into a live object.
This is useful for saving and restoring object states.
Example:
java
Copy code
import java.io.*;

class Car implements Serializable {
    String model;

    Car(String model) {
        this.model = model;
    }
}

public class Main {
    public static void main(String[] args) {
        try {
            // Serializing an object
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("car.ser"));
            Car car = new Car("Mercedes");
            out.writeObject(car);
            out.close();

            // Deserializing the object
            ObjectInputStream in = new ObjectInputStream(new FileInputStream("car.ser"));
            Car deserializedCar = (Car) in.readObject();
            in.close();
            System.out.println(deserializedCar.model); // Output: Mercedes
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
Using Factory Methods (Design Patterns)

Factory methods are used to create objects without exposing the creation logic. This is a common design pattern for managing object creation.
Example:
java
Copy code
class Car {
    String model;

    private Car(String model) {
        this.model = model;
    }

    // Factory method
    public static Car createCar(String model) {
        return new Car(model);
    }
}

public class Main {
    public static void main(String[] args) {
        Car car = Car.createCar("Ferrari"); // Creating object using factory method
        System.out.println(car.model); // Output: Ferrari
    }
}
Reflection API in Java
What is Reflection?
Reflection is a powerful feature in Java that allows the inspection and manipulation of classes, interfaces, methods, and fields at runtime. This is particularly useful for dynamic programming, debugging, and frameworks that need to work with classes without knowing them at compile time.

Key Features of Reflection:
Inspecting Classes: You can get information about a class, such as its name, modifiers, fields, methods, and
constructors.
Accessing Private Members: Reflection allows you to access private fields and methods, bypassing normal
access controls.
Dynamic Class Loading: Classes can be loaded, and objects can be created dynamically at runtime.
Modifying Fields and Methods: Fields can be read and modified, and methods can be invoked dynamically.

Commonly Used Reflection Classes:
Class: Represents classes and interfaces.
Constructor: Represents constructors of classes.
Method: Represents methods of classes.
Field: Represents fields (variables) of classes.
Example of Using Reflection:
java
Copy code
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;

class Person {
    private String name;
    private int age;

    public Person() {}

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public void greet() {
        System.out.println("Hello, my name is " + name);
    }
}

public class ReflectionExample {
    public static void main(String[] args) {
        try {
            // Loading the class dynamically
            Class<?> personClass = Class.forName("Person");

            // Creating an object using the default constructor
            Object person = personClass.getDeclaredConstructor().newInstance();

            // Accessing private fields
            Field nameField = personClass.getDeclaredField("name");
            nameField.setAccessible(true); // Allows access to private fields
            nameField.set(person, "John");

            Field ageField = personClass.getDeclaredField("age");
            ageField.setAccessible(true);
            ageField.set(person, 30);

            // Invoking a method
            Method greetMethod = personClass.getDeclaredMethod("greet");
            greetMethod.invoke(person); // Output: Hello, my name is John

            // Creating an object using a parameterized constructor
            Constructor<?> constructor = personClass.getConstructor(String.class, int.class);
            Object person2 = constructor.newInstance("Alice", 25);
            greetMethod.invoke(person2); // Output: Hello, my name is Alice
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
Benefits of Usin